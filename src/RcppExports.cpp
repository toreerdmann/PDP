// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// Mahalanobis
arma::vec Mahalanobis(arma::mat x, arma::rowvec center, arma::mat cov);
RcppExport SEXP PDP_Mahalanobis(SEXP xSEXP, SEXP centerSEXP, SEXP covSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type center(centerSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cov(covSEXP);
    rcpp_result_gen = Rcpp::wrap(Mahalanobis(x, center, cov));
    return rcpp_result_gen;
END_RCPP
}
// dmvt_arma
arma::vec dmvt_arma(arma::mat x, arma::rowvec mean, arma::mat sigma, double nu);
RcppExport SEXP PDP_dmvt_arma(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvt_arma(x, mean, sigma, nu));
    return rcpp_result_gen;
END_RCPP
}
// log_pred
double log_pred(arma::mat x, arma::rowvec mean, double kappa, double nu, arma::mat sigma);
RcppExport SEXP PDP_log_pred(SEXP xSEXP, SEXP meanSEXP, SEXP kappaSEXP, SEXP nuSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_pred(x, mean, kappa, nu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// logsumexp
double logsumexp(const arma::vec& x);
RcppExport SEXP PDP_logsumexp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logsumexp(x));
    return rcpp_result_gen;
END_RCPP
}
// one_pass_cpp
void one_pass_cpp(NumericVector z, arma::mat y, List components, List prior, NumericMatrix P, double alpha, double lambda, int debug);
RcppExport SEXP PDP_one_pass_cpp(SEXP zSEXP, SEXP ySEXP, SEXP componentsSEXP, SEXP priorSEXP, SEXP PSEXP, SEXP alphaSEXP, SEXP lambdaSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type components(componentsSEXP);
    Rcpp::traits::input_parameter< List >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type P(PSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type debug(debugSEXP);
    one_pass_cpp(z, y, components, prior, P, alpha, lambda, debug);
    return R_NilValue;
END_RCPP
}
// qik_cpp
double qik_cpp(arma::mat x, int k, NumericVector z, List components, NumericVector Pi, double lambda);
RcppExport SEXP PDP_qik_cpp(SEXP xSEXP, SEXP kSEXP, SEXP zSEXP, SEXP componentsSEXP, SEXP PiSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type components(componentsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(qik_cpp(x, k, z, components, Pi, lambda));
    return rcpp_result_gen;
END_RCPP
}
// qi0_cpp
double qi0_cpp(arma::mat x, List prior, double alpha);
RcppExport SEXP PDP_qi0_cpp(SEXP xSEXP, SEXP priorSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(qi0_cpp(x, prior, alpha));
    return rcpp_result_gen;
END_RCPP
}
// get_assigment_prob
arma::vec get_assigment_prob(arma::mat x, NumericVector z, List components, List prior, NumericVector Pi, double lambda, double alpha);
RcppExport SEXP PDP_get_assigment_prob(SEXP xSEXP, SEXP zSEXP, SEXP componentsSEXP, SEXP priorSEXP, SEXP PiSEXP, SEXP lambdaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type components(componentsSEXP);
    Rcpp::traits::input_parameter< List >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_assigment_prob(x, z, components, prior, Pi, lambda, alpha));
    return rcpp_result_gen;
END_RCPP
}
// update
void update(List components, int k, const arma::mat x, int debug);
RcppExport SEXP PDP_update(SEXP componentsSEXP, SEXP kSEXP, SEXP xSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type components(componentsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type debug(debugSEXP);
    update(components, k, x, debug);
    return R_NilValue;
END_RCPP
}
// new_component
List new_component(List components, int k, const arma::mat x, int debug);
RcppExport SEXP PDP_new_component(SEXP componentsSEXP, SEXP kSEXP, SEXP xSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type components(componentsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(new_component(components, k, x, debug));
    return rcpp_result_gen;
END_RCPP
}
